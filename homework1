from typing import Any
from typing import List


class OurAwesomeException(Exception):
    pass




def is_two_object_has_same_value(first: Any, second: Any) -> bool:

    return first == second




def is_two_objects_has_same_type(first: Any, second: Any) -> bool:

    return type(first) == type(second)




def is_two_objects_is_the_same_objects(first: Any, second: Any) -> bool:

    return first is second




def multiple_ints(first_value: int, second_value: int) -> int:

    try:
        product = first_value * second_value
        return int(product)
    except ValueError:
        print('ValueError')




def multiple_ints_with_conversion(first_value: Any, second_value: Any) -> int:

    try:
        product = int(first_value) * int(second_value)
        return product
    except Exception:
        print('OurAwesomeException')




def is_word_in_text(word: str, text: str) -> bool:

    return word in text




def some_loop_exercise() -> list:
    L = []
    must_not_be_in_list = [6,7]

    for n in range(0,13):
        if n not in must_not_be_in_list:
            L.append(n)
    return L




def remove_from_list_all_negative_numbers(data: List[int]) -> list:

    L = []
    for n in data:
        if n > 0:
            L.append(n)
    return L




def alphabet() -> dict:

    characters = list('abcdefghijklmnopqrstuvwxyz')
    numbers = [n for n in range(1, len(characters)+1)]
    dictionary = dict(zip(characters, numbers))
    return dictionary




def simple_sort(data: List[int]) -> List[list]:
    if len(data)<2:
        return data
    else:
        pivot = data[0]
        less = [n for n in data[1:] if n <= pivot]
        greater = [n for n in data[1:] if n > pivot]

        return simple_sort(less) + [pivot] + simple_sort(greater)
    pass
